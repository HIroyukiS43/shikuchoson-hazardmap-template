{"version":3,"sources":["components/CityBoundary.tsx","components/OverlayFeatureLayers.tsx","components/OverlayTileLayers.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CityBoundary","cityOsm","boundaryFeature","osmtogeojson","features","find","feature","id","toString","startsWith","GeoJSON","data","style","fillOpacity","attribution","OverlayFeatureLayers","featureCollections","Object","entries","map","name","featureCollection","LayersControl","Overlay","onEachFeature","layer","bindPopup","properties","filter","key","val","join","OverlayTileLayers","tiles","tile","TileLayer","url","opacity","App","bounds","elements","latLngBounds","LatLngBounds","minlat","minlon","maxlat","maxlon","MapContainer","maxBounds","minZoom","maxZoom","height","position","collapsed","window","innerWidth","config","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uy0OAQO,SAASA,EAAT,GAA2C,IAAnBC,EAAkB,EAAlBA,QAEvBC,EADcC,IAAaF,GACGG,SAASC,MAAK,SAACC,GAAD,yBAChDA,EAAQC,UADwC,iBAChD,EAAYC,kBADoC,aAChD,EAAwBC,WAAW,gBAGrC,OAAKP,EAGH,cAACQ,EAAA,EAAD,CACEC,KAAMT,EACNU,MAAO,CAAEC,YAAa,GACtBC,YAAY,yDANa,K,WCLxB,SAASC,EAAT,GAA8D,IAA9BC,EAA6B,EAA7BA,mBACrC,OACE,mCACGC,OAAOC,QAAQF,GAAoBG,KAAI,YAAgC,IAAD,mBAA7BC,EAA6B,KAAvBC,EAAuB,KACrE,OACE,cAACC,EAAA,EAAcC,QAAf,CAAkCH,KAAMA,EAAxC,SACE,cAACV,EAAA,EAAD,CACEC,KAAMU,EACNG,cAAe,SAAClB,EAASmB,GACvBA,EAAMC,UAAN,kFAEIpB,EAAQqB,WAAWP,KAFvB,oCAIIH,OAAOC,QAAQZ,EAAQqB,YACtBC,QAAO,mCAAEC,EAAF,gBAAsB,SAARA,KACrBV,KAAI,mCAAEU,EAAF,KAAOC,EAAP,wBAAsBD,EAAtB,iBAAkCC,EAAlC,aACJC,KAAK,IAPV,2BAJsBX,QCH/B,SAASY,EAAT,GAA8C,IAAjBC,EAAgB,EAAhBA,MAClC,OACE,mCACGA,EAAMd,KAAI,SAACe,GACV,OACE,cAACZ,EAAA,EAAcC,QAAf,CAAuCH,KAAMc,EAAKd,KAAlD,SACE,cAACe,EAAA,EAAD,CACEC,IAAKF,EAAKE,IACVC,QAASH,EAAKG,SAAW,IACzBvB,YAAaoB,EAAKpB,eAJMoB,EAAKd,W,oBC2B5BkB,MA/Bf,WACE,IAAMC,EAAStC,EAAQuC,SAAS,GAAGD,OAC7BE,EAAe,IAAIC,eACvB,CAACH,EAAOI,OAAQJ,EAAOK,QACvB,CAACL,EAAOM,OAAQN,EAAOO,SAGzB,OACE,eAACC,EAAA,EAAD,CACER,OAAQE,EACRO,UAAWP,EACXQ,QAAS,EACTC,QAAS,GACTtC,MAAO,CAAEuC,OAAQ,SALnB,UAOE,cAAChB,EAAA,EAAD,CACEC,IAAI,4DACJtB,YAAY,iGAEd,cAACd,EAAD,CAAcC,QAASA,IACvB,eAACqB,EAAA,EAAD,CAAe8B,SAAS,WAAWC,UAAWC,OAAOC,YAAc,IAAnE,UACE,cAACvB,EAAD,CAAmBC,MAAOuB,EAAOvB,QACjC,cAAClB,EAAD,CAEEC,mBAAoBA,WCtBfyC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.71971d55.chunk.js","sourcesContent":["import { FeatureCollection } from \"geojson\";\nimport osmtogeojson from \"osmtogeojson\";\nimport { GeoJSON } from \"react-leaflet\";\n\ntype Props = {\n  cityOsm: any;\n};\n\nexport function CityBoundary({ cityOsm }: Props) {\n  const cityGeoJSON = osmtogeojson(cityOsm) as FeatureCollection;\n  const boundaryFeature = cityGeoJSON.features.find((feature) =>\n    feature.id?.toString()?.startsWith(\"relation/\")\n  );\n\n  if (!boundaryFeature) return null;\n\n  return (\n    <GeoJSON\n      data={boundaryFeature}\n      style={{ fillOpacity: 0 }}\n      attribution='<a href=\"http://osm.org/copyright\">OpenStreetMap</a>'\n    />\n  );\n}\n","import { FeatureCollection } from \"geojson\";\nimport { LayersControl, GeoJSON } from \"react-leaflet\";\n\ntype Props = {\n  featureCollections: {\n    [name: string]: FeatureCollection;\n  };\n};\n\nexport function OverlayFeatureLayers({ featureCollections }: Props) {\n  return (\n    <>\n      {Object.entries(featureCollections).map(([name, featureCollection]) => {\n        return (\n          <LayersControl.Overlay key={name} name={name}>\n            <GeoJSON\n              data={featureCollection}\n              onEachFeature={(feature, layer) => {\n                layer.bindPopup(`\n                  <h3 style=\"margin: 0 0 0.5rem; text-align: center;\">${\n                    feature.properties.name\n                  }</h3>\n                  ${Object.entries(feature.properties)\n                    .filter(([key, _]) => key !== \"name\")\n                    .map(([key, val]) => `<b>${key}</b>: ${val}<br />`)\n                    .join(\"\")}\n                `);\n              }}\n            />\n          </LayersControl.Overlay>\n        );\n      })}\n    </>\n  );\n}\n","import { LayersControl, TileLayer } from \"react-leaflet\";\n\ntype Props = {\n  tiles: {\n    name: string;\n    url: string;\n    attribution: string;\n    opacity?: number;\n  }[];\n};\n\nexport function OverlayTileLayers({ tiles }: Props) {\n  return (\n    <>\n      {tiles.map((tile) => {\n        return (\n          <LayersControl.Overlay key={tile.name} name={tile.name}>\n            <TileLayer\n              url={tile.url}\n              opacity={tile.opacity || 0.75}\n              attribution={tile.attribution}\n            />\n          </LayersControl.Overlay>\n        );\n      })}\n    </>\n  );\n}\n","import { LatLngBounds } from \"leaflet\";\nimport \"leaflet-defaulticon-compatibility\";\nimport \"leaflet-defaulticon-compatibility/dist/leaflet-defaulticon-compatibility.webpack.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport { LayersControl, MapContainer, TileLayer } from \"react-leaflet\";\nimport cityOsm from \"./city-osm.json\";\nimport { CityBoundary } from \"./components/CityBoundary\";\nimport { OverlayFeatureLayers } from \"./components/OverlayFeatureLayers\";\nimport { OverlayTileLayers } from \"./components/OverlayTileLayers\";\nimport featureCollections from \"./feature-collections.json\";\nimport config from \"./hazardmap-config.json\";\n\nfunction App() {\n  const bounds = cityOsm.elements[0].bounds;\n  const latLngBounds = new LatLngBounds(\n    [bounds.minlat, bounds.minlon],\n    [bounds.maxlat, bounds.maxlon]\n  );\n\n  return (\n    <MapContainer\n      bounds={latLngBounds}\n      maxBounds={latLngBounds}\n      minZoom={5}\n      maxZoom={17}\n      style={{ height: \"100vh\" }}\n    >\n      <TileLayer\n        url=\"https://cyberjapandata.gsi.go.jp/xyz/pale/{z}/{x}/{y}.png\"\n        attribution='<a href=\"https://maps.gsi.go.jp/development/ichiran.html\">国土地理院</a>'\n      />\n      <CityBoundary cityOsm={cityOsm} />\n      <LayersControl position=\"topright\" collapsed={window.innerWidth <= 768}>\n        <OverlayTileLayers tiles={config.tiles} />\n        <OverlayFeatureLayers\n          // @ts-ignore\n          featureCollections={featureCollections}\n        />\n      </LayersControl>\n    </MapContainer>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}