{"version":3,"sources":["components/OverlayFeatureLayers.module.css","components/CityBoundary.tsx","components/OverlayFeatureLayers.tsx","components/OverlayTileLayers.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","CityBoundary","cityOsm","boundaryFeature","osmtogeojson","features","find","feature","id","toString","startsWith","GeoJSON","data","style","fillOpacity","attribution","iconColors","FeaturePopup","className","styles","name","properties","Object","entries","filter","key","map","val","OverlayFeatureLayers","featureCollections","i","featureCollection","iconColor","length","icon","Icon","Default","iconUrl","iconRetinaUrl","LayersControl","Overlay","pointToLayer","pointFeature","latlng","Marker","bindPopup","ReactDOMServer","renderToString","OverlayTileLayers","tiles","tile","TileLayer","url","opacity","App","bounds","elements","latLngBounds","LatLngBounds","minlat","minlon","maxlat","maxlon","Helmet","config","city","MapContainer","maxBounds","minZoom","maxZoom","height","ScaleControl","position","collapsed","window","innerWidth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7fc9360b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"name\":\"OverlayFeatureLayers_name__3d60W\",\"properties\":\"OverlayFeatureLayers_properties__xNSZg\"};","import { FeatureCollection } from \"geojson\";\nimport osmtogeojson from \"osmtogeojson\";\nimport { GeoJSON } from \"react-leaflet\";\n\ntype Props = {\n  cityOsm: any;\n};\n\nexport function CityBoundary({ cityOsm }: Props) {\n  const cityGeoJSON = osmtogeojson(cityOsm) as FeatureCollection;\n  const boundaryFeature = cityGeoJSON.features.find((feature) =>\n    feature.id?.toString()?.startsWith(\"relation/\")\n  );\n\n  if (!boundaryFeature) return null;\n\n  return (\n    <GeoJSON\n      data={boundaryFeature}\n      style={{ fillOpacity: 0 }}\n      attribution='<a href=\"http://osm.org/copyright\">OpenStreetMap</a>'\n    />\n  );\n}\n","import { Feature, FeatureCollection } from \"geojson\";\nimport { Icon, Marker } from \"leaflet\";\nimport ReactDOMServer from \"react-dom/server\";\nimport { GeoJSON, LayersControl } from \"react-leaflet\";\nimport styles from \"./OverlayFeatureLayers.module.css\";\n\ntype Props = {\n  featureCollections: {\n    [name: string]: FeatureCollection;\n  };\n};\n\nconst iconColors = [\n  \"blue\",\n  \"gold\",\n  \"red\",\n  \"green\",\n  \"orange\",\n  \"yellow\",\n  \"violet\",\n  \"gray\",\n  \"black\",\n];\n\nfunction FeaturePopup({ feature }: { feature: Feature }) {\n  return (\n    <>\n      <h3 className={styles.name}>{feature.properties?.name}</h3>\n      <ul className={styles.properties}>\n        {feature.properties &&\n          Object.entries(feature.properties)\n            .filter(([key, _]) => key !== \"name\")\n            .map(([key, val]) => (\n              <li>\n                <b>{key}</b>: {val}\n              </li>\n            ))}\n      </ul>\n    </>\n  );\n}\n\nexport function OverlayFeatureLayers({ featureCollections }: Props) {\n  return (\n    <>\n      {Object.entries(featureCollections).map(\n        ([name, featureCollection], i) => {\n          const iconColor = iconColors[i % iconColors.length];\n          const icon = new Icon.Default({\n            iconUrl: `https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-${iconColor}.png`,\n            iconRetinaUrl: `https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-${iconColor}.png`,\n          });\n\n          return (\n            <LayersControl.Overlay key={name} name={name}>\n              <GeoJSON\n                data={featureCollection}\n                pointToLayer={(pointFeature, latlng) => {\n                  return new Marker(latlng, { icon: icon }).bindPopup(\n                    // https://stackoverflow.com/a/60686195\n                    ReactDOMServer.renderToString(\n                      <FeaturePopup feature={pointFeature} />\n                    )\n                  );\n                }}\n              />\n            </LayersControl.Overlay>\n          );\n        }\n      )}\n    </>\n  );\n}\n","import { LayersControl, TileLayer } from \"react-leaflet\";\n\ntype Props = {\n  tiles: {\n    name: string;\n    url: string;\n    attribution: string;\n    opacity?: number;\n  }[];\n};\n\nexport function OverlayTileLayers({ tiles }: Props) {\n  return (\n    <>\n      {tiles.map((tile) => {\n        return (\n          <LayersControl.Overlay key={tile.name} name={tile.name}>\n            <TileLayer\n              url={tile.url}\n              opacity={tile.opacity || 0.75}\n              attribution={tile.attribution}\n            />\n          </LayersControl.Overlay>\n        );\n      })}\n    </>\n  );\n}\n","import { LatLngBounds } from \"leaflet\";\nimport \"leaflet-defaulticon-compatibility\";\nimport \"leaflet-defaulticon-compatibility/dist/leaflet-defaulticon-compatibility.webpack.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport { Helmet } from \"react-helmet\";\nimport {\n  LayersControl,\n  MapContainer,\n  ScaleControl,\n  TileLayer,\n} from \"react-leaflet\";\nimport { CityBoundary } from \"./components/CityBoundary\";\nimport { OverlayFeatureLayers } from \"./components/OverlayFeatureLayers\";\nimport { OverlayTileLayers } from \"./components/OverlayTileLayers\";\nimport cityOsm from \"./generated/city-osm.json\";\nimport featureCollections from \"./generated/feature-collections.json\";\nimport config from \"./generated/hazardmap-config.json\";\n\nfunction App() {\n  const bounds = cityOsm.elements[0].bounds;\n  const latLngBounds = new LatLngBounds(\n    [bounds.minlat, bounds.minlon],\n    [bounds.maxlat, bounds.maxlon]\n  );\n\n  return (\n    <>\n      <Helmet>\n        <title>{config.city}ハザードマップ</title>\n      </Helmet>\n\n      <MapContainer\n        bounds={latLngBounds}\n        maxBounds={latLngBounds}\n        minZoom={5}\n        maxZoom={17}\n        style={{ height: \"100vh\" }}\n      >\n        <TileLayer\n          url=\"https://cyberjapandata.gsi.go.jp/xyz/pale/{z}/{x}/{y}.png\"\n          attribution='<a href=\"https://maps.gsi.go.jp/development/ichiran.html\">国土地理院</a>'\n        />\n        <ScaleControl position=\"bottomright\" />\n        <CityBoundary cityOsm={cityOsm} />\n        <LayersControl position=\"topright\" collapsed={window.innerWidth <= 768}>\n          <OverlayTileLayers tiles={config.tiles} />\n          <OverlayFeatureLayers\n            // @ts-ignore\n            featureCollections={featureCollections}\n          />\n        </LayersControl>\n      </MapContainer>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}