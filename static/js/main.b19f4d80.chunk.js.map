{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","bounds","cityOsm","elements","node","members","find","member","type","cityGeoJson","osmtogeojson","MapContainer","center","lat","lon","zoom","config","minZoom","maxBounds","minlat","minlon","maxlat","maxlon","style","height","TileLayer","attribution","url","GeoJSON","data","features","fillOpacity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kWAuCeA,MAhCf,WACE,IAAMC,EAASC,EAAQC,SAAS,GAAGF,OAC7BG,EAAOF,EAAQC,SAAS,GAAGE,QAAQC,MAAK,SAACC,GAC7C,MAAuB,SAAhBA,EAAOC,QAEVC,EAAcC,IAAaR,GAEjC,OACE,eAACS,EAAA,EAAD,CACEC,OAAQ,CAACR,EAAKS,IAAKT,EAAKU,KACxBC,KAAMC,EAAOD,KACbE,QAAS,GACTC,UAAW,CACT,CAACjB,EAAOkB,OAAQlB,EAAOmB,QACvB,CAACnB,EAAOoB,OAAQpB,EAAOqB,SAEzBC,MAAO,CAAEC,OAAQ,SARnB,UAUE,cAACC,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,uDAEN,cAACC,EAAA,EAAD,CACEC,KAAMpB,EAAYqB,SAAS,GAC3BP,MAAO,WACL,MAAO,CAAEQ,YAAa,UClBjBC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.b19f4d80.chunk.js","sourcesContent":["import { FeatureCollection } from \"geojson\";\nimport \"leaflet/dist/leaflet.css\";\nimport osmtogeojson from \"osmtogeojson\";\nimport { GeoJSON, MapContainer, TileLayer } from \"react-leaflet\";\nimport cityOsm from \"./city-osm.json\";\nimport config from \"./hazardmap-config.json\";\n\nfunction App() {\n  const bounds = cityOsm.elements[0].bounds;\n  const node = cityOsm.elements[0].members.find((member) => {\n    return member.type === \"node\";\n  }) as { lat: number; lon: number };\n  const cityGeoJson = osmtogeojson(cityOsm) as FeatureCollection;\n\n  return (\n    <MapContainer\n      center={[node.lat, node.lon]}\n      zoom={config.zoom}\n      minZoom={10}\n      maxBounds={[\n        [bounds.minlat, bounds.minlon],\n        [bounds.maxlat, bounds.maxlon],\n      ]}\n      style={{ height: \"100vh\" }}\n    >\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      <GeoJSON\n        data={cityGeoJson.features[0]}\n        style={() => {\n          return { fillOpacity: 0 };\n        }}\n      />\n    </MapContainer>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}