{"version":3,"sources":["components/CityBoundary.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CityBoundary","cityGeoJson","osmtogeojson","cityOsm","GeoJSON","data","features","style","fillOpacity","attribution","App","bounds","elements","latLngBounds","LatLngBounds","minlat","minlon","maxlat","maxlon","MapContainer","maxBounds","minZoom","maxZoom","height","TileLayer","url","LayersControl","position","collapsed","window","innerWidth","config","hazardmapPortalTiles","map","hazardmapPortalTile","Overlay","name","opacity","Object","entries","geojson","onEachFeature","feature","layer","bindPopup","properties","filter","key","val","join","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+hyOAKaA,EAAe,WAC1B,IAAMC,EAAcC,IAAaC,GAEjC,OACE,cAACC,EAAA,EAAD,CACEC,KAAMJ,EAAYK,SAAS,GAC3BC,MAAO,CAAEC,YAAa,GACtBC,YAAY,0D,gBC2DHC,MA7Df,WACE,IAAMC,EAASR,EAAQS,SAAS,GAAGD,OAC7BE,EAAe,IAAIC,eACvB,CAACH,EAAOI,OAAQJ,EAAOK,QACvB,CAACL,EAAOM,OAAQN,EAAOO,SAGzB,OACE,eAACC,EAAA,EAAD,CACER,OAAQE,EACRO,UAAWP,EACXQ,QAAS,EACTC,QAAS,GACTf,MAAO,CAAEgB,OAAQ,SALnB,UAOE,cAACC,EAAA,EAAD,CACEC,IAAI,4DACJhB,YAAY,iGAEd,cAAC,EAAD,IACA,eAACiB,EAAA,EAAD,CAAeC,SAAS,WAAWC,UAAWC,OAAOC,WAAa,KAAlE,UACGC,EAAOC,qBAAqBC,KAAI,SAACC,GAChC,OACE,cAACR,EAAA,EAAcS,QAAf,CAEEC,KAAMF,EAAoBE,KAF5B,SAIE,cAACZ,EAAA,EAAD,CACEC,IAAKS,EAAoBT,IACzBY,QAAS,IACT5B,YAAY,uKANTyB,EAAoBE,SAW9BE,OAAOC,QAAQjC,GAAU2B,KAAI,YAAsB,IAAD,mBAAnBG,EAAmB,KAAbI,EAAa,KACjD,OACE,cAACd,EAAA,EAAcS,QAAf,CAAkCC,KAAMA,EAAxC,SACE,cAAChC,EAAA,EAAD,CAEEC,KAAMmC,EACNC,cAAe,SAACC,EAASC,GACvBA,EAAMC,UAAN,oFAEIF,EAAQG,WAAWT,KAFvB,sCAIIE,OAAOC,QAAQG,EAAQG,YACtBC,QAAO,mCAAEC,EAAF,gBAAsB,SAARA,KACrBd,KAAI,mCAAEc,EAAF,KAAOC,EAAP,wBAAsBD,EAAtB,iBAAkCC,EAAlC,aACJC,KAAK,IAPV,6BALsBb,aCjCzBc,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e247e5c6.chunk.js","sourcesContent":["import { FeatureCollection } from \"geojson\";\nimport osmtogeojson from \"osmtogeojson\";\nimport { GeoJSON } from \"react-leaflet\";\nimport cityOsm from \"../city-osm.json\";\n\nexport const CityBoundary = () => {\n  const cityGeoJson = osmtogeojson(cityOsm) as FeatureCollection;\n\n  return (\n    <GeoJSON\n      data={cityGeoJson.features[0]}\n      style={{ fillOpacity: 0 }}\n      attribution='<a href=\"http://osm.org/copyright\">OpenStreetMap</a>'\n    />\n  );\n};\n","import { LatLngBounds } from \"leaflet\";\nimport \"leaflet-defaulticon-compatibility\";\nimport \"leaflet-defaulticon-compatibility/dist/leaflet-defaulticon-compatibility.webpack.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport { GeoJSON, LayersControl, MapContainer, TileLayer } from \"react-leaflet\";\nimport cityOsm from \"./city-osm.json\";\nimport { CityBoundary } from \"./components/CityBoundary\";\nimport features from \"./features.json\";\nimport config from \"./hazardmap-config.json\";\n\nfunction App() {\n  const bounds = cityOsm.elements[0].bounds;\n  const latLngBounds = new LatLngBounds(\n    [bounds.minlat, bounds.minlon],\n    [bounds.maxlat, bounds.maxlon]\n  );\n\n  return (\n    <MapContainer\n      bounds={latLngBounds}\n      maxBounds={latLngBounds}\n      minZoom={5}\n      maxZoom={17}\n      style={{ height: \"100vh\" }}\n    >\n      <TileLayer\n        url=\"https://cyberjapandata.gsi.go.jp/xyz/pale/{z}/{x}/{y}.png\"\n        attribution='<a href=\"https://maps.gsi.go.jp/development/ichiran.html\">国土地理院</a>'\n      />\n      <CityBoundary />\n      <LayersControl position=\"topright\" collapsed={window.innerWidth < 1080}>\n        {config.hazardmapPortalTiles.map((hazardmapPortalTile) => {\n          return (\n            <LayersControl.Overlay\n              key={hazardmapPortalTile.name}\n              name={hazardmapPortalTile.name}\n            >\n              <TileLayer\n                url={hazardmapPortalTile.url}\n                opacity={0.75}\n                attribution='<a href=\"https://disaportal.gsi.go.jp/hazardmap/copyright/opendata.html\">ハザードマップポータルサイト</a>'\n              />\n            </LayersControl.Overlay>\n          );\n        })}\n        {Object.entries(features).map(([name, geojson]) => {\n          return (\n            <LayersControl.Overlay key={name} name={name}>\n              <GeoJSON\n                // @ts-ignore\n                data={geojson}\n                onEachFeature={(feature, layer) => {\n                  layer.bindPopup(`\n                    <h3 style=\"margin: 0 0 0.5rem; text-align: center;\">${\n                      feature.properties.name\n                    }</h3>\n                    ${Object.entries(feature.properties)\n                      .filter(([key, _]) => key !== \"name\")\n                      .map(([key, val]) => `<b>${key}</b>: ${val}<br />`)\n                      .join(\"\")}\n                  `);\n                }}\n              />\n            </LayersControl.Overlay>\n          );\n        })}\n      </LayersControl>\n    </MapContainer>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}