{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","bounds","cityOsm","elements","latLngBounds","LatLngBounds","minlat","minlon","maxlat","maxlon","cityGeoJson","osmtogeojson","MapContainer","maxBounds","minZoom","maxZoom","style","height","TileLayer","url","attribution","GeoJSON","data","features","fillOpacity","LayersControl","position","collapsed","window","innerWidth","config","hazardmapPortalTiles","map","hazardmapPortalTile","Overlay","name","opacity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"44iKAsDeA,MA9Cf,WACE,IAAMC,EAASC,EAAQC,SAAS,GAAGF,OAC7BG,EAAe,IAAIC,eACvB,CAACJ,EAAOK,OAAQL,EAAOM,QACvB,CAACN,EAAOO,OAAQP,EAAOQ,SAEnBC,EAAcC,IAAaT,GAEjC,OACE,eAACU,EAAA,EAAD,CACEX,OAAQG,EACRS,UAAWT,EACXU,QAAS,EACTC,QAAS,GACTC,MAAO,CAAEC,OAAQ,SALnB,UAOE,cAACC,EAAA,EAAD,CACEC,IAAI,4DACJC,YAAY,iGAGd,cAACC,EAAA,EAAD,CACEC,KAAMZ,EAAYa,SAAS,GAC3BP,MAAO,WACL,MAAO,CAAEQ,YAAa,IAExBJ,YAAY,yDAGd,cAACK,EAAA,EAAD,CAAeC,SAAS,WAAWC,UAAWC,OAAOC,WAAa,KAAlE,SACGC,EAAOC,qBAAqBC,KAAI,SAACC,GAChC,OACE,cAACR,EAAA,EAAcS,QAAf,CAAuBC,KAAMF,EAAoBE,KAAjD,SACE,cAACjB,EAAA,EAAD,CACEC,IAAKc,EAAoBd,IACzBiB,QAAS,IACThB,YAAY,iLC9BbiB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f74a53c0.chunk.js","sourcesContent":["import { FeatureCollection } from \"geojson\";\nimport { LatLngBounds } from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport osmtogeojson from \"osmtogeojson\";\nimport { GeoJSON, LayersControl, MapContainer, TileLayer } from \"react-leaflet\";\nimport cityOsm from \"./city-osm.json\";\nimport config from \"./hazardmap-config.json\";\n\nfunction App() {\n  const bounds = cityOsm.elements[0].bounds;\n  const latLngBounds = new LatLngBounds(\n    [bounds.minlat, bounds.minlon],\n    [bounds.maxlat, bounds.maxlon]\n  );\n  const cityGeoJson = osmtogeojson(cityOsm) as FeatureCollection;\n\n  return (\n    <MapContainer\n      bounds={latLngBounds}\n      maxBounds={latLngBounds}\n      minZoom={5}\n      maxZoom={17}\n      style={{ height: \"100vh\" }}\n    >\n      <TileLayer\n        url=\"https://cyberjapandata.gsi.go.jp/xyz/pale/{z}/{x}/{y}.png\"\n        attribution='<a href=\"https://maps.gsi.go.jp/development/ichiran.html\">国土地理院</a>'\n      />\n\n      <GeoJSON\n        data={cityGeoJson.features[0]}\n        style={() => {\n          return { fillOpacity: 0 };\n        }}\n        attribution='<a href=\"http://osm.org/copyright\">OpenStreetMap</a>'\n      />\n\n      <LayersControl position=\"topright\" collapsed={window.innerWidth < 1080}>\n        {config.hazardmapPortalTiles.map((hazardmapPortalTile) => {\n          return (\n            <LayersControl.Overlay name={hazardmapPortalTile.name}>\n              <TileLayer\n                url={hazardmapPortalTile.url}\n                opacity={0.75}\n                attribution='<a href=\"https://disaportal.gsi.go.jp/hazardmap/copyright/opendata.html\">ハザードマップポータルサイト</a>'\n              />\n            </LayersControl.Overlay>\n          );\n        })}\n      </LayersControl>\n    </MapContainer>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}